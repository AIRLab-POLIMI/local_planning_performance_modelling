bt_navigator:
  ros__parameters:
    use_sim_time: True
    #global_frame: map
    #robot_base_frame: base_link
    #transform_tolerance: 0.1
    #default_nav_to_pose_bt_xml: "navigate_w_replanning_and_recovery.xml"
    bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# controller_server:
#   ros__parameters:
#     use_sim_time: True
#     debug_trajectory_details: False
#     min_vel_x: 0.0
#     min_vel_y: 0.0
#     max_vel_x: 0.26
#     max_vel_y: 0.0
#     max_vel_theta: 1.0
#     min_speed_xy: 0.0
#     max_speed_xy: 0.26
#     min_speed_theta: 0.0
#     min_x_velocity_threshold: 0.001
#     # Add high threshold velocity for turtlebot 3 issue.
#     # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     acc_lim_x: 2.5
#     acc_lim_y: 0.0
#     acc_lim_theta: 3.2
#     decel_lim_x: -2.5
#     decel_lim_y: 0.0
#     decel_lim_theta: -3.2
#     vx_samples: 20
#     vy_samples: 5
#     vtheta_samples: 20
#     sim_time: 1.7
#     linear_granularity: 0.05
#     xy_goal_tolerance: 0.25
#     transform_tolerance: 0.2
#     critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#     BaseObstacle.scale: 0.02
#     PathAlign.scale: 0.0
#     GoalAlign.scale: 0.0
#     PathDist.scale: 32.0
#     GoalDist.scale: 24.0
#     RotateToGoal.scale: 32.0

controller_server:
  ros__parameters:
    # controller server parameters 
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugin: "goal_checker"
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True
    # DWB controller parameters (also exists for Regulated Pure Pursuit)
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.26
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      GoalAlign.scale: 24.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# local_costmap:
#   local_costmap:
#     ros__parameters:
#       use_sim_time: True
#       global_frame: odom
#       plugin_names: ["obstacle_layer", "inflation_layer"]
#       plugin_types: ["nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]
#       rolling_window: true
#       width: 3
#       height: 3
#       origin_x: -1.5
#       origin_y: -1.5
#       resolution: 0.05
#       robot_radius: 0.22
#       inflation_layer:
#         cost_scaling_factor: 3.0
#       obstacle_layer:
#         enabled: True
#         observation_sources: scan
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#       static_layer:
#         map_subscribe_transient_local: True
#       always_send_full_costmap: True
# local_costmap_client:
#   ros__parameters:
#     use_sim_time: True
# local_costmap_rclcpp_node:
#   ros__parameters:
#     use_sim_time: True

# global_costmap:
#   global_costmap:
#     ros__parameters:
#       map_topic: /map
#       width: 100
#       height: 100
#       origin_x: -50.0
#       origin_y: -50.0
#       use_sim_time: True
#       plugin_names: ["static_layer", "obstacle_layer", "inflation_layer"]
#       plugin_types: ["nav2_costmap_2d::StaticLayer", "nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]
#       robot_radius: 0.22
#       obstacle_layer:
#         enabled: True
#         observation_sources: scan
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#       static_layer:
#         map_subscribe_transient_local: True
#       always_send_full_costmap: True
# global_costmap_client:
#   ros__parameters:
#     use_sim_time: True
# global_costmap_rclcpp_node:
#   ros__parameters:
#     use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      footprint_padding: 0.03
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.22 # radius set and used, so no footprint points
      resolution: 0.05
      plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        combination_method: 1
        scan:
          topic: /scan
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          inf_is_valid: false
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        unknown_threshold: 15
        mark_threshold: 0
        observation_sources: pointcloud
        combination_method: 1
        pointcloud:  # no frame set, uses frame from message
          topic: /intel_realsense_r200_depth/points
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.55
        cost_scaling_factor: 1.0
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: True


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05

planner_server:
  ros__parameters:
    use_sim_time: True
    tolerance: 0.0
    use_astar: false

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "turtlebot3_world.yaml"
